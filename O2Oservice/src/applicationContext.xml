<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-3.2.xsd">
   
    <!-- 注解自动载入 -->  
    <context:annotation-config />  
    <!--通过注解的方式来自动扫描工程中的组件-->
    <context:component-scan base-package="com.tykj"/>
     <context:component-scan base-package="com.webScoke.controller" /> 
    <context:property-placeholder location="classpath:/jdbc.properties" />  
    <bean id="abstractDataSource" abstract="true"  class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">  
         <property name="driverClass" value="${jdbc.driver}"/> 
         <property name="user" value="${jdbc.username}"></property>
	     <property name="password" value="${jdbc.password}"></property> 
	     <!--c3p0的配置-->
		 <!--连接池中保留的最小连接数。-->
         <property name="minPoolSize" value="30"/>
         <!--连接池中保留的最大连接数。Default: 15 -->
         <property name="maxPoolSize" value="200"/>  
         <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
         <property name="initialPoolSize" value="50"/>
         <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
         <property name="acquireIncrement" value="20"/>
         <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
		 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
		 如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
         <property name="maxStatements" value="0"/>
         <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。单位秒 Default: 0  -->
         <property name="maxIdleTime" value="60"/>
         <!-- 自己实现一条SQL检测语句 -->
         <property name="preferredTestQuery" value="SELECT 1"/>
         <!--每60秒检查所有连接池中的空闲连接。单位秒 Default: 0 -->
         <property name="idleConnectionTestPeriod" value="60"/>
         <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
         <property name="acquireRetryAttempts" value="30"/>
         <!--定义在从数据库获取新连接失败后重复尝试的间隔时间。Default: 1000 毫秒-->
         <property name="acquireRetryDelay" value="1000"/>
         <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
	                保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
	                获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
         <property name="breakAfterAcquireFailure" value="false"/>
         <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。
			建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false -->
         <property name="testConnectionOnCheckout" value="false"/>
         <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性，
			因为是个事后操作，所以是异步的，应用端不需要等待测试结果，但同样会造成至少多一倍的数据库调用
			建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false -->
         <property name="testConnectionOnCheckin" value="false"/>
    </bean>
   
    <bean id="dataSourceMySQL_read" parent="abstractDataSource"> 
		 <property name="jdbcUrl" value="${jdbc.url.read}"/>
    </bean>
    
    <bean id="dataSourceMySQL_write" parent="abstractDataSource"> 
		 <property name="jdbcUrl" value="${jdbc.url.write}"/>
    </bean>
    
    <!-- 路由机制选择可变数据源 -->
    <bean id="dataSource" class="com.tykj.mybatis.RWRoutingChooseDataSource">  
	   <property name="targetDataSources">
	   	   <map key-type="java.lang.String">
	   	      <entry key="write" value-ref="dataSourceMySQL_write"/> 
	   	      <entry key="read" value-ref="dataSourceMySQL_read"/> 
	   	   </map> 
	   </property>
	   <property name="defaultTargetDataSource" ref="dataSourceMySQL_write"/> 
	</bean> 
	
	<!-- sql工厂bean -->
    <bean id="mysqlSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
         <property name="dataSource" ref="dataSource" />  
         <property name="configLocation" value="classpath:mybatis.xml"/>
         <property name="mapperLocations">
            <list>
                <!-- 表示在com/mapper包或以下所有目录中，以-mapper.xml结尾所有文件 -->
                <value>classpath:com/mapper/*/*Mapper.xml</value>
            </list>
         </property>
     </bean> 
     
     <!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 -->
     <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
         <constructor-arg index="0" ref="mysqlSqlSessionFactory"></constructor-arg>
      </bean>
      
      <!-- 通过扫描的模式，扫描目录在com/任意目录下的mapper目录下，所有的mapper都需要继承SqlMapper接口的接口 -->
      <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
          <property name="basePackage" value="com.tykj.*.mapper"/>
          <!-- 注意注入sqlSessionTemplate -->
          <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
      </bean>
    
      <!-- 激活自动代理功能 -->  
	  <aop:aspectj-autoproxy proxy-target-class="true"/>  
    
	  <!-- 配置数据库注解aop -->  
	  <bean id="dataSourceAspect" class="com.tykj.mybatis.DataSourceAspect" />  
	  <aop:config>  
	      <aop:aspect id="c" ref="dataSourceAspect">  
	         <aop:pointcut id="tx" expression="execution(* *..service..*.*(..))"/>  
	         <aop:before pointcut-ref="tx" method="before"/>  
	      </aop:aspect>  
	  </aop:config>  
	  <!-- 配置数据库注解aop -->  
	
	  <!-- 通过注解的方式来配置事物声明  针对写操作-->
      <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
           <property name="dataSource" ref="dataSource" />
      </bean>
    
	  <!-- 	<tx:annotation-driven />   -->
    
	  <tx:advice id="txAdvice" transaction-manager="transactionManager">
           <tx:attributes>
        	  <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			  <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			  <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
              <tx:method name="get*" read-only="true"/>
              <tx:method name="load*" read-only="true"/>
              <tx:method name="find*" read-only="true"/>
              <tx:method name="query*" read-only="true"/>
              <tx:method name="count*" read-only="true"/>
           </tx:attributes>
      </tx:advice>

      <aop:config>
           <aop:pointcut id="executeService" expression="execution(* *..service..*.*(..))"/>
           <aop:advisor pointcut-ref="executeService" advice-ref="txAdvice"/>
      </aop:config>

</beans>